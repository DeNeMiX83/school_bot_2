import logging
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery

from data.config import morph
from funcs.all_funcs import student_class_id, is_student, check_school_id
from keyboards.inline import other_choice, food_write, canteen_zeroize_buttons, \
    confirm_choice_buttons, exit_panel, canteen_notise_panel, canteen_notise_ditails_panel, \
    canteen_quantity_all_panel, exit_from_food_panel
from keyboards.inline.callback_datas import answer, confirm_choice
from sqlite import cur, con
from keyboards.default import canteen_panel
from loader import dp, bot
from states import WriteFood
from utils.misc import rate_limit
import datetime as dt

canteen_data = {}


@rate_limit(3)
@dp.message_handler(Text(equals=['–°—Ç–æ–ª–æ–≤–∞—èü•£']), is_student)
async def canteen(msg: Message):
    user_id = msg.from_user.id
    print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –≤ —Å—Ç–æ–ª–æ–≤—É—é')
    await msg.answer(text='–í—ã–±–µ—Ä–∏', reply_markup=canteen_panel)
    await register_class_in_canteen(msg)


@rate_limit(2)
@dp.message_handler(Text(equals=['–ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—Éüç±']), is_student)  # –∫–Ω–æ–ø–∫–∞
async def food(msg: Message):
    class_id = await student_class_id(msg)
    food = await take_food(msg, class_id)
    user_id = msg.from_user.id
    print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –≤ —á—Ç–æ –¥–∞—é—Ç')
    day = dt.datetime.now()
    new_day = cur.execute('''SELECT * FROM days
                            WHERE day = ? and month = ? and year = ?''',
                          [day.day, day.month, day.year]).fetchone()
    if new_day:  # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å—å –µ—Å—Ç—å —Ç–æ –æ—Ç–º–µ—á–∞—Ç—å—Å—è –∑–∞–Ω–æ–≥–æ –Ω–µ –Ω–∞–¥–æ
        await msg.answer(text='–í—ã —Å–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—á–∞–ª–∏—Å—å')
        return
    if len(food) == 2:
        await msg.answer(text='–î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤–Ω–µ—Å–µ–Ω—ã')
        return
    elif food == 'write':
        await msg.answer(text='–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
        return
    canteen_data[class_id]['food'] = 'write'
    await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –≤—Å–µ', reply_markup=canteen_quantity_all_panel)
    await WriteFood.Quantity.set()


@dp.callback_query_handler(text='canteen_write_food_exit',
                           state=[WriteFood.Quantity, WriteFood.Name, WriteFood.Price])
async def write_food_exit_func(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –≤—ã—à–µ–ª –∏–∑ —á—Ç–æ –¥–∞—é—Ç')
    await call.message.answer(text='–û—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    await call.message.delete()
    await state.finish()
    await register_class_in_canteen(call)


@dp.callback_query_handler(text='canteen_quantity_all', state=WriteFood.Quantity)
async def canteen_quantity_all_func(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –≤–≤–µ–ª —Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤—Å–µ')
    await call.message.delete()
    class_id = await student_class_id(call)
    quantity = len(cur.execute('''SELECT * FROM students WHERE class = ?''', [class_id]).fetchall())
    await write_quantity(call.message, state, quantity)


@dp.message_handler(state=WriteFood.Quantity)  # –∫–æ–ª-–≤–æ —É—á–µ–Ω–∏–∫–æ–≤
async def price_food(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    class_id = await student_class_id(msg)
    try:
        quantity = int(msg.text)
    except Exception as e:
        print(e)
        await msg.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã', reply_markup=exit_from_food_panel)
        return
    students_q = len(cur.execute('SELECT user FROM students WHERE class = ?', [class_id]).fetchall())
    if quantity > students_q:
        comment = morph.parse('—É—á–µ–Ω–∏–∫')[0]
        word = comment.make_agree_with_number(students_q).word
        await msg.answer(text=f'‚ùå–í—ã –Ω–µ –ø—Ä–∞–≤—ã –≤ –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ {students_q} {word}‚ùå')
        await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ ',
                         reply_markup=canteen_quantity_all_panel)
        return
    print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –≤–≤–µ–ª —Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –≤—Ä—É—á–Ω—É—é: {quantity}')
    await write_quantity(msg, state, quantity)


@dp.message_handler(state=WriteFood.Name)  # –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
async def food_name_func(msg: Message, state: FSMContext):
    name = msg.text
    user_id = msg.from_user.id
    print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: {name}')
    data = await state.get_data()
    data['–ù–∞–∑–≤–∞–Ω–∏–µ'] = name
    await state.update_data(data)
    if data.get('name'):
        await save_food(msg, state)
        return
    await state.update_data(name=True)
    await msg.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞', reply_markup=exit_from_food_panel)
    await WriteFood.Price.set()


@dp.message_handler(state=WriteFood.Price)  # —Ü–µ–Ω–∞ –±–ª—é–¥–∞
async def food_price_func(msg: Message, state: FSMContext):
    price = msg.text
    user_id = msg.from_user.id
    print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –≤–≤–µ–ª —Ü–µ–Ω—É –±–ª—é–¥–∞: {price}')
    try:
        price = float(msg.text)
    except Exception as e:
        await msg.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã')
        return
    data = await state.get_data()
    data['–¶–µ–Ω–∞'] = price
    await state.update_data(data)
    await save_food(msg, state)
    await state.set_state(None)


async def save_food(msg: Message, state: FSMContext):
    data = await state.get_data()
    await msg.answer(text='–ï—Å—Ç—å —á—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å?',
                     reply_markup=await other_choice(['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–£—á–µ–Ω–∏–∫–∏'], data,
                                                     type_='food_name'))


@dp.callback_query_handler(answer.filter(type='food_name'),
                           state=[WriteFood.Quantity, WriteFood.Name, WriteFood.Price, None])  # –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –±–ª—é–¥—É
async def different_answer(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    choice = callback_data['answer']
    user_id = call.from_user.id
    await call.message.delete()
    if choice == '–£—á–µ–Ω–∏–∫–∏':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ',
                                  reply_markup=canteen_quantity_all_panel)
        await WriteFood.Quantity.set()
        print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤')
    elif choice == '–ù–∞–∑–≤–∞–Ω–∏–µ':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞', reply_markup=exit_from_food_panel)
        await WriteFood.Name.set()
        print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ')
    elif choice == '–¶–µ–Ω–∞':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞')
        await WriteFood.Price.set()
        print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É')
    elif choice == 'save':
        print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} —Å–æ—Ö—Ä–∞–Ω–∏–ª –±–ª—é–¥–æ')
        class_id = cur.execute('''SELECT class FROM students WHERE user = ?''',
                               [call.from_user.id]).fetchone()[0]
        data = await state.get_data()
        canteen_data[class_id]['food'] = [data.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), data.get('–¶–µ–Ω–∞')]
        canteen_data[class_id]['quantity'] = data.get('–£—á–µ–Ω–∏–∫–∏')
        people = cur.execute('''SELECT user FROM students WHERE class = ?''', [class_id]).fetchall()
        people = map(lambda id: id[0], people)
        for user_id in people:
            await bot.send_message(chat_id=user_id,
                                   text='–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
                                        '\n------------------------------'
                                        '\n–ò–¥–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—èüòã')
        await state.finish()


@rate_limit(2)
@dp.message_handler(Text(equals=['–ó–∞–ø–∏—Å–∞—Ç—å—Å—èüñã']), is_student)  # –∫–Ω–æ–ø–∫–∞
async def write(msg: Message):
    user_id = msg.from_user.id
    print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –∑–∞–ø–∏—Å–∞—Ç—å—Å—è')
    class_id = await student_class_id(msg)
    food = await take_food(msg, class_id)
    print('–µ–¥–∞ –≤ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', food)
    print(canteen_data)
    if not food or food == 'write':
        await msg.answer(text='–ë–ª—é–¥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        print(
            f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–æ –±–ª—é–¥–æ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
            f'{canteen_data}')
        return
    await msg.answer(text=f'ü•ò–ë–ª—é–¥–æ: {food[0]}'
                          f'\nüí∂–¶–µ–Ω–∞: {food[1]}',
                     reply_markup=food_write)
    con.commit()


@dp.callback_query_handler(answer.filter(type='food_write'), state='*')  # –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–Ω–æ/–±–µ—Å–ø–ª–∞—Ç–Ω–æ
async def food_write_func(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    choice = callback_data['answer']
    await call.message.delete()
    user_id = call.from_user.id
    class_id = cur.execute('''SELECT class FROM students WHERE user = ?''',
                           [user_id]).fetchone()[0]
    if choice == '+':
        canteen_data[class_id]['who'][user_id] = choice
    elif choice == '-':
        canteen_data[class_id]['who'][user_id] = choice
    print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞–ø–∏—Å–∞–ª—Å—è: {choice}')
    await call.message.answer(text='‚ôªÔ∏è–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã‚ôªÔ∏è')
    await state.finish()


@rate_limit(2)
@dp.message_handler(Text(equals=['–û—Ç–º–µ—Ç–∏—Ç—åüìù']), is_student)  # –∫–Ω–æ–ø–∫–∞
async def food_note_func(msg: Message):
    class_id = await student_class_id(msg)
    food = await take_food(msg, class_id)
    user_id = msg.from_user.id
    if not food or food == 'write':
        await msg.answer(text='–ë–ª—é–¥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –æ—Ç–º–µ—Ç–∏—Ç—å, –Ω–æ –±–ª—é–¥–æ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
              f'{canteen_data}')
        return
    quantity_now = len(canteen_data[class_id]['who'])
    quantity = canteen_data[class_id]['quantity']
    if quantity != quantity_now:
        await msg.answer(text='–ù–µ –≤—Å–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å'
                              f'\n–û—Å—Ç–∞–ª–æ—Å—å: {quantity - quantity_now}',
                         reply_markup=canteen_notise_ditails_panel)
        print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –æ—Ç–º–µ—Ç–∏—Ç—å, –Ω–æ –Ω–µ –≤—Å–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å')
        return
    print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –æ—Ç–º–µ—Ç–∏—Ç—å –∏ –æ—Ç–º–µ—Ç–∏–ª')
    await canteen_summ(msg, class_id, food)


@dp.callback_query_handler(text='canteen_notice_details')  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ—á–∞–Ω–∏—è
async def canteen_notice_func(call: CallbackQuery, state):
    user_id = call.from_user.id
    print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –æ—Ç–º–µ—Ç–∏—Ç—å –∏ –Ω–∞–∂–∞–ª –ø–æ–±—Ä–æ–±–Ω–µ–µ')
    await call.message.delete()
    class_id = await student_class_id(call)
    people = []
    for id in await stay_people_id(class_id):
        id = cur.execute('''SELECT name FROM users WHERE user_id = ?''', [id]).fetchone()[0]
        people.append(id)
    await call.message.answer(text='‚¨áÔ∏è–í–æ—Ç —ç—Ç–∏ –≥–µ—Ä–æ–∏‚¨áÔ∏è' +
                                   '\n------------------------------\nüîÖ' +
                                   '\nüîÖ'.join(people),
                              reply_markup=canteen_notise_panel)


@dp.callback_query_handler(text='canteen_notify_stay_people')  # —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–º –∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è
async def canteen_notify_stay_people_func(call: CallbackQuery, state):
    user_id = call.from_user.id
    print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –æ—Ç–º–µ—Ç–∏—Ç—å –∏ —É–≤–µ–¥–æ–º–∏–ª –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–∞—Ç—å—Å—è')
    await call.message.delete()
    class_id = await student_class_id(call)
    people = await stay_people_id(class_id)
    for id in people:
        await bot.send_message(chat_id=id, text='–í—ã –∑–∞–±—ã–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è')


@dp.callback_query_handler(text='canteen_notice')  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ—á–∞–Ω–∏—è
async def canteen_notice_func(call: CallbackQuery, state):
    user_id = call.from_user.id
    print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Ç–æ–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ –Ω–∞–∂–∞–ª –æ—Ç–º–µ—Ç–∏—Ç—å')
    await call.message.delete()
    class_id = await student_class_id(call)
    food = await take_food(call, class_id)
    await canteen_summ(call, class_id, food)


@dp.message_handler(Text(equals=['–°—É–º–º—ãüí∞']), is_student)  # –∫–Ω–æ–ø–∫–∞
async def food_sum_func(msg: Message):
    user_id = msg.from_user.id
    print(f'{msg.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –∑–∞—à–µ–ª –≤ —Å—É–º–º—ã')
    class_id = await student_class_id(msg)
    data = cur.execute('''SELECT u.name, s.canteen 
                        FROM students s 
                        LEFT JOIN users u ON s.user = u.user_id WHERE s.class = ?''',
                       [class_id]).fetchall()
    await msg.answer(text='‚¨áÔ∏è–°—É–º–º—ã‚¨áÔ∏è'
                          '\n---------------------------\nüîÖ' +
                          '\nüîÖ'.join(f'{name}: {price}' for name, price in data),
                     reply_markup=await canteen_zeroize_buttons(msg.from_user.id, class_id))


@dp.callback_query_handler(confirm_choice.filter(who='canteen'))  # –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—É–º–º
async def canteen_zeroize_func(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    await call.message.delete()
    choice = callback_data.get('choice')
    user_id = call.from_user.id
    if choice == 'zeroize':
        await call.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä',
                                  reply_markup=await confirm_choice_buttons('canteen'))
        print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –Ω–∞–∂–∞–ª –æ–±–Ω—É–ª–∏—Ç—å —Å—É–º–º—ã')
    elif choice == 'yes':
        cur.execute('''UPDATE students SET canteen = 0''')
        con.commit()
        print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –Ω–∞–∂–∞–ª –æ–±–Ω—É–ª–∏—Ç—å —Å—É–º–º—ã: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä')
        await call.message.answer(text='‚ôªÔ∏è–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞‚ôªÔ∏è')
    elif choice == 'no':
        await call.message.answer(text='‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞‚ùå')
        print(f'{call.from_user.full_name} —Ä–æ–ª—å: —É—á–µ–Ω–∏–∫, id: {user_id} –Ω–∞–∂–∞–ª –æ–±–Ω—É–ª–∏—Ç—å —Å—É–º–º—ã: –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä')


async def stay_people_id(class_id):
    people = canteen_data[class_id]['who']
    all_people = cur.execute('''SELECT u.user_id
                                    FROM users u 
                                    LEFT JOIN students s ON u.user_id = s.user WHERE class = ?''',
                             [class_id]).fetchall()
    return map(lambda x: str(x[0]), filter(lambda x: x[0] not in people, all_people))


async def write_quantity(msg, state, quantity):
    data = await state.get_data()
    data['–£—á–µ–Ω–∏–∫–∏'] = int(quantity)
    await state.update_data(data)
    if data.get('quantity'):
        await save_food(msg, state)
        return
    await state.update_data(quantity=True)
    await msg.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞', reply_markup=exit_from_food_panel)
    await WriteFood.Name.set()


def get_date():
    day = dt.datetime.now()
    return day.day, day.month, day.year


async def write_date_in_db(food, class_id):
    food, price = food
    try:
        cur.execute('''INSERT INTO days VALUES(NULL, ?, ?, ?, ?, ?, ?)''',
                    [class_id, *get_date(), food, price])
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É —Å –¥–Ω—è–º–∏')
        print(e)


async def write_choice_in_db(people_id, choice):
    day = cur.execute('''SELECT id FROM days WHERE day = ? and month = ? and year = ?''',
                      [*get_date()]).fetchone()[0]
    try:
        cur.execute('''INSERT INTO canteen_journal VALUES (NULL, ?, ?, ?)''',
                    [people_id, day, choice])
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∂—É—Ä–Ω–∞–ª —Å—Ç–æ–ª–æ–≤–æ–π')
        print(e)


async def canteen_summ(msg, class_id, food):
    paid = 0
    free = 0
    price = food[1]
    await write_date_in_db(food, class_id)
    for people_id, choice in canteen_data[class_id]['who'].items():
        if choice == '+':
            cur.execute('''UPDATE students SET canteen = canteen + ? WHERE user = ?''',
                        [price, people_id])
            paid += 1
        elif choice == '-':
            free += 1
        await write_choice_in_db(people_id, choice)
    class_id = await student_class_id(msg)
    for id in await stay_people_id(class_id):
        await write_choice_in_db(id, '-')
    con.commit()
    if isinstance(msg, CallbackQuery):
        msg = msg.message
    await msg.answer(text='‚¨áÔ∏è–ü–æ–ª—É—á–∏–ª–æ—Å—å‚¨áÔ∏è'
                          '\n-----------------------------'
                          f'\nüíµ–ü–ª–∞—Ç–Ω–æ: {paid}'
                          f'\nüí∏–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {free}')
    try:
        del canteen_data[class_id]
        print('–±–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ')
    except KeyError:
        pass


async def take_food(msg, class_id):
    try:
        food = canteen_data[class_id]['food']
        return food
    except Exception as e:
        await register_class_in_canteen(msg)
        food = await take_food(msg, class_id)
        return food


async def register_class_in_canteen(msg):
    class_id = await student_class_id(msg)
    if class_id not in canteen_data:
        canteen_data[class_id] = {'food': [], 'who': {}, 'quantity': 0}

