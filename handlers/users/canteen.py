from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery
from funcs import student_class_id, is_student
from keyboards.inline import other_choice, food_write, canteen_zeroize_buttons, \
    confirm_choice_buttons, exit_panel, canteen_notise_panel
from keyboards.inline.callback_datas import answer, confirm_choice
from sqlite import cur, con
from keyboards.default import canteen_panel, student_panel
from loader import dp, bot
from states import WriteFood
from utils.misc import rate_limit


canteen_data = {}


async def canteen_summ(msg, class_id, food):
    paid = 0
    free = 0
    price = food[1]
    for people_id, choice in canteen_data[class_id]['who'].items():
        print(people_id, choice)
        if choice == '+':
            cur.execute('''UPDATE students SET canteen = canteen + ? WHERE user = ?''',
                        [price, people_id])
            paid += 1
        elif choice == '-':
            free += 1
    con.commit()
    await msg.answer(text='‚¨áÔ∏è–ü–æ–ª—É—á–∏–ª–æ—Å—å‚¨áÔ∏è'
                          '\n-----------------------------'
                          f'\nüí∞–ü–ª–∞—Ç–Ω–æ: {paid}'
                          f'\nüí∏–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {free}')
    del canteen_data[class_id]


@rate_limit(6)
@dp.message_handler(Text(equals=['–°—Ç–æ–ª–æ–≤–∞—è']), is_student)
async def canteen(msg: Message):
    await msg.answer(text='–í—ã–±–µ—Ä–∏', reply_markup=canteen_panel)
    class_id = await student_class_id(msg)
    if class_id not in canteen_data:
        canteen_data[class_id] = {'food': False, 'who': {}, 'quantity': 0}


@rate_limit(2)
@dp.message_handler(Text(equals=['–ß—Ç–æ –¥–∞—é—Ç']), is_student)  # –∫–Ω–æ–ø–∫–∞
async def food(msg: Message):
    class_id = await student_class_id(msg)
    try:
        food = canteen_data[class_id]['food']
    except Exception as e:
        await msg.answer(text='–û—à–∏–±–∫–∞',
                         reply_markup=student_panel)
        return
    if not food:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ', reply_markup=exit_panel)
        await WriteFood.Quantity.set()
    else:
        await msg.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã')


@dp.message_handler(state=WriteFood.Quantity)  # –∫–æ–ª-–≤–æ —É—á–µ–Ω–∏–∫–æ–≤
async def price_food(msg: Message, state: FSMContext):
    quantity = msg.text
    if not quantity.isdigit():
        await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã')
        return
    data = await state.get_data()
    data['–£—á–µ–Ω–∏–∫–∏'] = int(quantity)
    await state.update_data(data)
    if data.get('quantity'):
        await save_food(msg, state)
        return
    await state.update_data(quantity=True)
    await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞')
    await WriteFood.Name.set()


@dp.message_handler(state=WriteFood.Name)  # –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
async def food_name_func(msg: Message, state: FSMContext):
    name = msg.text
    data = await state.get_data()
    data['–ù–∞–∑–≤–∞–Ω–∏–µ'] = name
    await state.update_data(data)
    if data.get('name'):
        await save_food(msg, state)
        return
    await state.update_data(name=True)
    await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞')
    await WriteFood.Price.set()


@dp.message_handler(state=WriteFood.Price)  # —Ü–µ–Ω–∞ –±–ª—é–¥–∞
async def food_price_func(msg: Message, state: FSMContext):
    price = msg.text
    if not price.isdigit():
        await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã')
        return
    data = await state.get_data()
    data['–¶–µ–Ω–∞'] = int(price)
    await state.update_data(data)
    await save_food(msg, state)


async def save_food(msg: Message, state: FSMContext):
    data = await state.get_data()
    await msg.answer(text='–ï—Å—Ç—å —á—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å?', reply_markup=await other_choice(['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–£—á–µ–Ω–∏–∫–∏'], data, type_='food_name'))


@dp.callback_query_handler(answer.filter(type='food_name'), state='*')  # –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –±–ª—é–¥—É
async def different_answer(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    choice = callback_data['answer']
    await call.message.delete()
    if choice == '–£—á–µ–Ω–∏–∫–∏':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ')
        await WriteFood.Quantity.set()
    elif choice == '–ù–∞–∑–≤–∞–Ω–∏–µ':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞')
        await WriteFood.Name.set()
    elif choice == '–¶–µ–Ω–∞':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞')
        await WriteFood.Price.set()
    elif choice == 'save':
        class_id = cur.execute('''SELECT class FROM students WHERE user = ?''',
                               [call.from_user.id]).fetchone()[0]
        data = await state.get_data()
        canteen_data[class_id]['food'] = [data.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), data.get('–¶–µ–Ω–∞')]
        canteen_data[class_id]['quantity'] = data.get('–£—á–µ–Ω–∏–∫–∏')
        for user_id in canteen_data[class_id]['who']:
            await bot.send_message(chat_id=user_id,
                                   text='–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
                                        '\n------------------------------'
                                        '\n–ò–¥–∏—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å—Å—èüòã')
        await state.finish()


@rate_limit(2)
@dp.message_handler(Text(equals=['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è']), is_student)  # –∫–Ω–æ–ø–∫–∞
async def write(msg: Message):
    class_id = await student_class_id(msg)
    try:
        food = canteen_data[class_id]['food']
    except Exception as e:
        await msg.answer(text='–û—à–∏–±–∫–∞',
                         reply_markup=student_panel)
        return
    if not food:
        await msg.answer(text='–ë–ª—é–¥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        return
    await msg.answer(text=f'–ë–ª—é–¥–æ: {food[0]}'
                          f'\n–¶–µ–Ω–∞: {food[1]}',
                     reply_markup=food_write)
    con.commit()


@dp.callback_query_handler(answer.filter(type='food_write'), state='*')  # –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–Ω–æ/–±–µ—Å–ø–ª–∞—Ç–Ω–æ
async def food_write_func(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    choice = callback_data['answer']
    await call.message.delete()
    user = call.from_user.id
    class_id = cur.execute('''SELECT class FROM students WHERE user = ?''',
                           [user]).fetchone()[0]
    if choice == '+':
        canteen_data[class_id]['who'][user] = choice
    elif choice == '-':
        canteen_data[class_id]['who'][user] = choice
    await call.message.answer(text='‚ôªÔ∏è–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã‚ôªÔ∏è')
    await state.finish()


@rate_limit(5)
@dp.message_handler(Text(equals=['–û—Ç–º–µ—Ç–∏—Ç—å']), is_student)  # –∫–Ω–æ–ø–∫–∞
async def food_note_func(msg: Message):
    class_id = await student_class_id(msg)
    try:
        food = canteen_data[class_id]['food']
    except Exception as e:
        await msg.answer(text='–û—à–∏–±–∫–∞',
                         reply_markup=student_panel)
        return
    if not food:
        await msg.answer(text='–ë–ª—é–¥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        return
    quantity_now = len(canteen_data[class_id]['who'])
    quantity = canteen_data[class_id]['quantity']
    if quantity != quantity_now:
        await msg.answer(text='–ù–µ –≤—Å–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å'
                              f'\n–û—Å—Ç–∞–ª–æ—Å—å: {quantity - quantity_now}',
                         reply_markup=canteen_notise_panel)
        return
    await canteen_summ(msg, class_id, food)


@dp.callback_query_handler(text='canteen_notice')  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ—á–∞–Ω–∏—è
async def canteen_notice_func(call: CallbackQuery, state):
    await call.message.delete()
    class_id = await student_class_id(call)
    food = canteen_data[class_id]['food']
    await canteen_summ(call.message, class_id, food)


@dp.message_handler(Text(equals=['–°—É–º–º—ã']), is_student)  # –∫–Ω–æ–ø–∫–∞
async def food_sum_func(msg: Message):
    class_id = await student_class_id(msg)
    data = cur.execute('''SELECT u.name, s.canteen 
                        FROM students s 
                        LEFT JOIN users u ON s.user = u.user_id WHERE s.class = ?''', [class_id]).fetchall()
    await msg.answer(text='‚¨áÔ∏è–°—É–º–º—ã‚¨áÔ∏è'
                          '\n---------------------------\nüîÖ' +
                          '\nüîÖ'.join(f'{name}: {price}' for name, price in data),
                     reply_markup=await canteen_zeroize_buttons(msg.from_user.id, class_id))


@dp.callback_query_handler(confirm_choice.filter(who='canteen'))  # –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—É–º–º
async def canteen_zeroize_func(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    await call.message.delete()
    choice = callback_data.get('choice')
    if choice == 'zeroize':
        await call.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä',
                                  reply_markup=await confirm_choice_buttons('canteen'))
    elif choice == 'yes':
        cur.execute('''UPDATE students SET canteen = 0''')
        con.commit()
        await call.message.answer(text='‚ôªÔ∏è–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞‚ôªÔ∏è')
    elif choice == 'no':
        await call.message.answer(text='‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞‚ùå')